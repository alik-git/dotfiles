// Place your key bindings in this file to override the defaults
[
    {
        "key": "alt+a",
        "command": "editor.debug.action.selectionToRepl"
    },
    {
        "key": "up",
        "command": "cursorUp",
        "when": "editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
    },
    {
        "key": "down",
        "command": "cursorDown",
        "when": "editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
    },
    {
        "key": "k",
        "command": "cursorUp",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Normal' && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
    },
    {
        "key": "j",
        "command": "cursorDown",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Normal' && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
    },
    // FOR NOTEBOOKS JUPYTER
    {
        "key": "j",
        "command": "notebook.focusNextEditor",
        "when": "vim.mode == 'Normal' && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
    },
    // FOR NOTEBOOKS JUPYTER
    {
        "key": "k",
        "command": "notebook.focusPreviousEditor",
        "when": "vim.mode == 'Normal' && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
    },
    // More notebooks STUFF
    {
        "key": "enter",
        "command": "extension.vim_insert",
        "when": "vim.mode == 'Normal' && notebookEditorFocused && !notebookCellExecuting && notebookCellType == 'code'"
    },
    // {
    //     "key": "capslock",
    //     "command": "vim.vim",
    //     "when": "vim.mode == 'Normal' && editorTextFocus && inputFocus && notebookEditorFocused && !inDebugRepl"
    // },
    {
        "key": "tab",
        "command": "selectNextSuggestion",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
    },
    {
        "key": "shift+tab",
        "command": "selectPrevSuggestion",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
    },
    {
        "key": "ctrl+'",
        "command": "workbench.action.terminal.focus",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+'",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        "key": "alt+x",
        "command": "python.execInTerminal",
        "when": "resourceExtname == '.py'"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.previousEditorInGroup"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.nextEditorInGroup"
    },
    {
        "key": "alt+h",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "alt+l",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "alt+i",
        "command": "extension.toggleBool",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+b",
        "command": "-extension.toggleBool",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+n",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+alt+right",
        "command": "workbench.action.moveEditorToRightGroup",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+q",
        "command": "-rewrap.rewrapComment",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+q",
        "command": "workbench.action.moveEditorToLeftGroup",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+e",
        "command": "workbench.action.moveEditorToRightGroup",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+d",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "alt+x",
        "command": "language-julia.executeFile",
        "when": "editorLangId == 'julia'"
    },
    {
        "key": "shift+enter",
        "command": "-language-julia.executeCellAndMove",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "ctrl+alt+j",
        "command": "-liveshare.join",
        "when": "liveshare:state != 'Joined' && liveshare:state != 'Shared'"
    },
    {
        "key": "ctrl+alt+l",
        "command": "workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+alt+right",
        "command": "-workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+alt+h",
        "command": "workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "ctrl+alt+left",
        "command": "-workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "alt+k",
        "command": "-keybindings.editor.recordSearchKeys",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "alt+\\",
        "command": "toggleVim"
    },
    {
        "key": "ctrl+k shift+enter",
        "command": "-workbench.action.pinEditor",
        "when": "!activeEditorIsPinned"
    },
    {
        "key": "alt+[",
        "command": "-editor.action.inlineSuggest.showPrevious",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "alt+[",
        "command": "workbench.action.pinEditor"
    },
    {
        "key": "alt+]",
        "command": "workbench.action.unpinEditor",
        "when": "activeEditorIsPinned"
    },
    {
        "key": "ctrl+k shift+enter",
        "command": "-workbench.action.unpinEditor",
        "when": "activeEditorIsPinned"
    },
    {
        "key": "alt+]",
        "command": "-editor.action.inlineSuggest.showNext",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    // PERSONAL CAVEMAN DEBUGGING STUFF
    {
        "key": "alt+f",
        "command": "multiCommand.printVariableSnippet",
        "when": "editorFocus && editorHasSelection"
    },
    {
        "key": "alt+v",
        "command": "multiCommand.wandbConfigVariableSnippet",
      
        // use the following if you wish to limit the command to python files
        "when": "editorFocus && editorHasSelection"
    },
    {
        "key": "alt+t",
        "command": "multiCommand.wandbLogVariableSnippet",
      
        // use the following if you wish to limit the command to python files
        "when": "editorFocus && editorHasSelection"
    },
    {
        "key": "alt+g",
        "command": "multiCommand.pytorchChangeDevice",
      
        // use the following if you wish to limit the command to python files
        "when": "editorFocus && editorHasSelection"
    },
    {
        "key": "ctrl+c",
        "command": "workbench.action.terminal.copySelection",
        "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.copySelection",
        "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "ctrl+v",
        "command": "workbench.action.terminal.paste",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    // {
    //     "key": "ctrl+v",
    //     "command": "pasteAndIndent.action",
    //     "when": "editorTextFocus && !editorReadonly"
    // },
    {
        "key": "shift+enter",
        "command": "-jupyter.runcurrentcelladvance",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "shift+enter",
        "command": "-jupyter.execSelectionInteractive",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.ownsSelection && !findInputFocussed && !jupyter.webExtension && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+enter",
        "command": "-notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "shift+enter",
        "command": "-notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && notebookCellType == 'code' || editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "shift+enter",
        "command": "-python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
]